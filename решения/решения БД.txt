1. CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL REFERENCES customers(id) ON DELETE CASCADE,
    order_date DATE NOT NULL
);

CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    product_name VARCHAR(255) NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    price NUMERIC(10, 2) NOT NULL CHECK (price >= 0)
);


2.INSERT INTO customers (name, email) VALUES
('Иван Иванов', 'ivan.ivanov@example.com'),
('Петр Петров', 'petr.petrov@example.com'),
('Сергей Сергеев', 'sergey.sergeev@example.com');

INSERT INTO orders (customer_id, order_date) VALUES
(1, '2025-08-01'),  -- заказ Иван Иванов
(2, '2025-08-02'),  -- заказ Петр Петров
(1, '2025-08-03');  -- второй заказ Иван Иванов

INSERT INTO order_items (order_id, product_name, quantity, price) VALUES
(1, 'Товар А', 2, 15000.00),  -- товар с ценой выше 10 000 в заказе 1
(1, 'Товар Б', 1, 5000.00),
(2, 'Товар В', 3, 1000.00),
(3, 'Товар Г', 1, 3000.00),
(3, 'Товар Д', 5, 600.00);

3.SELECT o.id, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id
WHERE c.name = 'Иван Иванов'
ORDER BY o.order_date;

4.SELECT product_name, quantity, price
FROM order_items
WHERE order_id = 3
ORDER BY price DESC;

5.SELECT 
    c.name,
    SUM(oi.price * oi.quantity) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
GROUP BY c.id, c.name
HAVING SUM(oi.price * oi.quantity) > 5000
ORDER BY total_spent DESC;


6.INSERT INTO order_items (order_id, product_name, quantity, price)
SELECT
    (1 + (random() * (SELECT MAX(id) FROM orders)))::int AS order_id,
    'Товар ' || (1 + (random() * 499))::int AS product_name,  -- Товары от 1 до 500
    (1 + (random() * 9))::int AS quantity,                    -- Количество 1-10
    round((100 + random() * (100000 - 100))::numeric, 2)      -- Цена от 100 до 100000 с 2 знаками
FROM generate_series(1, 1000000);


7. CREATE INDEX idx_orders_customer_id ON orders(customer_id); - тоже удалил. так как при его использование отрабатывает последовательный поиск, скорее всего маленькая таблица

CREATE INDEX idx_order_items_order_id_price ON order_items(order_id, price);

CREATE INDEX idx_order_items_product_name ON order_items(product_name); - удалил, так как он не помогал поиску, не используется 

8.EXPLAIN ANALYZE
SELECT *
FROM order_items
WHERE order_id = 123 AND price > 10000;

ответ - "Index Scan using idx_order_items_order_price on order_items  (cost=0.42..6.19 rows=1 width=34) (actual time=0.033..0.033 rows=0 loops=1)"
"  Index Cond: ((order_id = 123) AND (price > '10000'::numeric))"
"Planning Time: 1.691 ms"
"Execution Time: 0.175 ms"

EXPLAIN ANALYZE
SELECT *
FROM orders
WHERE customer_id = 1;

ответ - "Seq Scan on orders  (cost=0.00..1.04 rows=1 width=12) (actual time=0.009..0.010 rows=2 loops=1)"
"  Filter: (customer_id = 1)"
"  Rows Removed by Filter: 1"
"Planning Time: 7.698 ms"
"Execution Time: 0.017 ms"



9. Транзакция 
BEGIN;


WITH new_order AS (
    INSERT INTO orders(customer_id, order_date)
    VALUES (1, CURRENT_DATE)
    RETURNING id
)

INSERT INTO order_items(order_id, product_name, quantity, price)
SELECT id, 'Товар 1', 2, 100 FROM new_order
UNION ALL
SELECT id, 'Товар 2', 1, 200 FROM new_order
UNION ALL
SELECT id, NULL, 3, 50 FROM new_order;  

COMMIT;

Получаем ошибку 
ERROR:  null value in column "product_name" of relation "order_items" violates not-null constraint
Failing row contains (1000040, 16, null, 3, 50.00). 

SQL state: 23502
Detail: Failing row contains (1000040, 16, null, 3, 50.00).


применяем ROLLBACK;
ROLLBACK

Query returned successfully in 30 msec.


Проверяем все ли откатилось

SELECT o.id AS order_id, o.customer_id, o.order_date,
       i.product_name, i.quantity, i.price
FROM orders o
LEFT JOIN order_items i ON o.id = i.order_id
WHERE o.order_date = CURRENT_DATE
ORDER BY o.id DESC;


15	1	"2025-08-14"	"Товар 1"	2	100.00
15	1	"2025-08-14"	"Товар 2"	1	200.00
15	1	"2025-08-14"	"Товар 3"	3	50.00
12	1	"2025-08-14"	"Товар 1"	2	100.00
12	1	"2025-08-14"	"Товар 2"	1	200.00
12	1	"2025-08-14"	"Товар 3"	3	50.00


BEGIN;


WITH new_order AS (
    INSERT INTO orders(customer_id, order_date)
    VALUES (1, CURRENT_DATE)
    RETURNING id
)

INSERT INTO order_items(order_id, product_name, quantity, price)
SELECT id, 'Товар 1', 2, 100 FROM new_order
UNION ALL
SELECT id, 'Товар 2', 1, 200 FROM new_order
UNION ALL
SELECT id, 'Товар 3', 3, 50 FROM new_order;  

COMMIT;


17	1	"2025-08-14"	"Товар 1"	2	100.00
17	1	"2025-08-14"	"Товар 2"	1	200.00
17	1	"2025-08-14"	"Товар 3"	3	50.00
15	1	"2025-08-14"	"Товар 1"	2	100.00
15	1	"2025-08-14"	"Товар 2"	1	200.00
15	1	"2025-08-14"	"Товар 3"	3	50.00
12	1	"2025-08-14"	"Товар 1"	2	100.00
12	1	"2025-08-14"	"Товар 2"	1	200.00
12	1	"2025-08-14"	"Товар 3"	3	50.00





















